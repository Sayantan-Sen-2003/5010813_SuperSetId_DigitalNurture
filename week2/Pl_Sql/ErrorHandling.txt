Scenario 1: SafeTransferFunds Procedure

CREATE OR REPLACE PROCEDURE SafeTransferFunds(
    p_from_account_id IN NUMBER,
    p_to_account_id IN NUMBER,
    p_amount IN NUMBER
) IS
    v_from_balance NUMBER;
    v_to_balance NUMBER;
BEGIN
    -- Check if both accounts exist
    SELECT Balance INTO v_from_balance FROM Accounts WHERE AccountID = p_from_account_id;
    SELECT Balance INTO v_to_balance FROM Accounts WHERE AccountID = p_to_account_id;
    
    -- Check for sufficient funds
    IF v_from_balance < p_amount THEN
        RAISE_APPLICATION_ERROR(-20001, 'Insufficient funds in account ' || p_from_account_id);
    END IF;
    
    -- Begin transaction
    BEGIN
        -- Update balances
        UPDATE Accounts SET Balance = Balance - p_amount WHERE AccountID = p_from_account_id;
        UPDATE Accounts SET Balance = Balance + p_amount WHERE AccountID = p_to_account_id;
        
        -- Commit transaction
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            -- Rollback transaction on error
            ROLLBACK;
            -- Log error
            DBMS_OUTPUT.PUT_LINE('Error during fund transfer: ' || SQLERRM);
            -- Re-raise the error
            RAISE;
    END;
END;
/



Here are the stored procedures with error handling for each scenario:

Scenario 1: SafeTransferFunds Procedure
This procedure transfers funds between two accounts and handles exceptions such as insufficient funds.

plsql
Copy code
CREATE OR REPLACE PROCEDURE SafeTransferFunds(
    p_from_account_id IN NUMBER,
    p_to_account_id IN NUMBER,
    p_amount IN NUMBER
) IS
    v_from_balance NUMBER;
    v_to_balance NUMBER;
BEGIN
    -- Check if both accounts exist
    SELECT Balance INTO v_from_balance FROM Accounts WHERE AccountID = p_from_account_id;
    SELECT Balance INTO v_to_balance FROM Accounts WHERE AccountID = p_to_account_id;
    
    -- Check for sufficient funds
    IF v_from_balance < p_amount THEN
        RAISE_APPLICATION_ERROR(-20001, 'Insufficient funds in account ' || p_from_account_id);
    END IF;
    
    -- Begin transaction
    BEGIN
        -- Update balances
        UPDATE Accounts SET Balance = Balance - p_amount WHERE AccountID = p_from_account_id;
        UPDATE Accounts SET Balance = Balance + p_amount WHERE AccountID = p_to_account_id;
        
        -- Commit transaction
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            -- Rollback transaction on error
            ROLLBACK;
            -- Log error
            DBMS_OUTPUT.PUT_LINE('Error during fund transfer: ' || SQLERRM);
            -- Re-raise the error
            RAISE;
    END;
END;
/
Scenario 2: UpdateSalary Procedure

CREATE OR REPLACE PROCEDURE UpdateSalary(
    p_employee_id IN NUMBER,
    p_percentage IN NUMBER
) IS
BEGIN
    -- Update salary with error handling
    BEGIN
        UPDATE Employees
        SET Salary = Salary + (Salary * p_percentage / 100)
        WHERE EmployeeID = p_employee_id;

        -- Check if the update was successful
        IF SQL%ROWCOUNT = 0 THEN
            RAISE_APPLICATION_ERROR(-20002, 'Employee ID ' || p_employee_id || ' does not exist.');
        END IF;

        -- Commit transaction
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            -- Rollback transaction on error
            ROLLBACK;
            -- Log error
            DBMS_OUTPUT.PUT_LINE('Error updating salary: ' || SQLERRM);
            -- Re-raise the error
            RAISE;
    END;
END;
/


Scenario 3: AddNewCustomer Procedure

CREATE OR REPLACE PROCEDURE AddNewCustomer(
    p_customer_id IN NUMBER,
    p_name IN VARCHAR2,
    p_dob IN DATE,
    p_balance IN NUMBER
) IS
BEGIN
    -- Insert new customer with error handling
    BEGIN
        INSERT INTO Customers (CustomerID, Name, DOB, Balance, LastModified)
        VALUES (p_customer_id, p_name, p_dob, p_balance, SYSDATE);

        -- Commit transaction
        COMMIT;
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            -- Log error for duplicate customer ID
            DBMS_OUTPUT.PUT_LINE('Customer with ID ' || p_customer_id || ' already exists.');
        WHEN OTHERS THEN
            -- Rollback transaction on other errors
            ROLLBACK;
            -- Log error
            DBMS_OUTPUT.PUT_LINE('Error adding new customer: ' || SQLERRM);
            -- Re-raise the error
            RAISE;
    END;
END;
/
