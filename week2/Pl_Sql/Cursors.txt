Scenario 1: GenerateMonthlyStatements Procedure

DECLARE
    CURSOR customer_cursor IS
        SELECT DISTINCT c.CustomerID, c.Name
        FROM Customers c
        JOIN Transactions t ON c.CustomerID = t.CustomerID
        WHERE EXTRACT(MONTH FROM t.TransactionDate) = EXTRACT(MONTH FROM SYSDATE)
          AND EXTRACT(YEAR FROM t.TransactionDate) = EXTRACT(YEAR FROM SYSDATE);
    
    CURSOR transaction_cursor(p_customer_id NUMBER) IS
        SELECT t.TransactionID, t.TransactionDate, t.Amount, t.TransactionType
        FROM Transactions t
        WHERE t.CustomerID = p_customer_id
          AND EXTRACT(MONTH FROM t.TransactionDate) = EXTRACT(MONTH FROM SYSDATE)
          AND EXTRACT(YEAR FROM t.TransactionDate) = EXTRACT(YEAR FROM SYSDATE);
    
    v_customer_name Customers.Name%TYPE;
BEGIN
    FOR cust IN customer_cursor LOOP
        v_customer_name := cust.Name;
        
        DBMS_OUTPUT.PUT_LINE('Statement for Customer: ' || v_customer_name);
        DBMS_OUTPUT.PUT_LINE('-----------------------------------------');
        
        FOR txn IN transaction_cursor(cust.CustomerID) LOOP
            DBMS_OUTPUT.PUT_LINE('Transaction ID: ' || txn.TransactionID);
            DBMS_OUTPUT.PUT_LINE('Date: ' || txn.TransactionDate);
            DBMS_OUTPUT.PUT_LINE('Amount: ' || txn.Amount);
            DBMS_OUTPUT.PUT_LINE('Type: ' || txn.TransactionType);
            DBMS_OUTPUT.PUT_LINE('-----------------------------------------');
        END LOOP;
        
        DBMS_OUTPUT.PUT_LINE('End of Statement');
        DBMS_OUTPUT.PUT_LINE('-----------------------------------------');
    END LOOP;
END;
/
Scenario 2: ApplyAnnualFee Procedure

DECLARE
    v_annual_fee NUMBER := 50; -- Define the annual maintenance fee amount
    
    CURSOR account_cursor IS
        SELECT AccountID, Balance
        FROM Accounts;
BEGIN
    FOR acc IN account_cursor LOOP
        -- Update the balance by deducting the annual fee
        UPDATE Accounts
        SET Balance = Balance - v_annual_fee
        WHERE AccountID = acc.AccountID;
    END LOOP;
    
    -- Commit the transaction
    COMMIT;
END;
/


Scenario 3: UpdateLoanInterestRates Procedure

DECLARE
    v_new_interest_rate NUMBER := 4.5; -- Define the new interest rate
    
    CURSOR loan_cursor IS
        SELECT LoanID, InterestRate
        FROM Loans;
BEGIN
    FOR loan IN loan_cursor LOOP
        -- Update the interest rate based on the new policy
        UPDATE Loans
        SET InterestRate = v_new_interest_rate
        WHERE LoanID = loan.LoanID;
    END LOOP;
    
    -- Commit the transaction
    COMMIT;
END;
/


